#+AUTHOR: Evan
#+DATE: <2025-09-25 Thu>
#+EMAIL: evan.delepine-gengembre.etu@univ-lille.fr
#+PROPERTY: header-args :tangle ~/.config/emacs/init-tangled.el

* Configuration Emacs (Programmation littéraire)

~La paresse c'est se lever à six heures du matin, pour avoir plus de
temps à ne rien faire.~

Ce fichier me permet d'organiser ma configuration emacs en [[https://orgmode.org][org-mode]],
décrite en français. pour toute question/remarque, n'hésitez pas à me
contacter par mail à evan.delepine-gengembre.etu@univ-lille.fr :) (nom de
famille comiquement long) 

* Sources

J'installe tous les paquets utilisés via [[melpa.org][MELPA]]

#+begin_src elisp
  (setq use-package-always-ensure t)
(condition-case nil
    (require 'use-package)
  (file-error
   (package-refresh-contents)
   (package-install 'use-package)
   (require 'use-package)))


  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

#+end_src

* Thème

J'utilise le thème à haut contraste [[https://www.gnu.org/software/emacs/manual/html_mono/modus-themes.html][modus-operandi]]

#+begin_src elisp
  (add-to-list 'custom-theme-load-path "~/.config/emacs/catppuccin")
  (load-theme 'catppuccin :no-confirm)
  (setq catppuccin-flavor 'mocha)
  (catppuccin-reload)

#+end_src

* Variables

Catégorie fourre-tout dans laquelle j'active ou désactive des modes,
ainsi que des setq.
Cette longue liste est triée grâce à la fonction sort-lines

#+begin_src elisp
  (delete-selection-mode t)
  (display-battery-mode 1)
  (electric-pair-mode 1)
  (global-display-line-numbers-mode t)
  (global-font-lock-mode 1)
  (menu-bar-mode -1)
  (olivetti-mode 1)
  (pixel-scroll-precision-mode 1)
  (recentf-mode 1)
  (require 'mu4e)
  (save-place-mode 1)
  (savehist-mode 1)
  (scroll-bar-mode -1)
  (set-face-attribute 'default nil :font "Iosevka Fixed" :height 110)
  (set-face-attribute 'variable-pitch nil :font "Iosevka Fixed" :height 110)
  (set-window-buffer nil (current-buffer))
  (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (setq evil-want-keybinding nil)
  (setq history-length 25)
  (setq inhibit-startup-screen t)
  (setq initial-buffer-choice "~/cours_perso/S3")
  (setq initial-scratch-message nil)
  (setq mu4e-maildir "~/Mail/gmail")
  (setq olivetti-body-width 200)
  (setq org-agenda-files '("~/org/edt.org"))
  (setq org-agenda-span 30)
  (setq org-default-notes-file "~/org/capture.org")
  (setq org-directory "~/org")
  (setq org-hide-emphasis-markers t)
  (setq org-pretty-entities t)
  (setq ring-bell-function 'ignore)
  (setq scroll-margin 5)
  (setq user-mail-address "evan.delepine-gengembre@univ-lille.fr" user-full-name "Evan Delepine")
  (setq visible-bell t)
  (setq-default left-margin-width 1 right-margin-width 1)
  (setq-default line-spacing 0.2)
  (setq-default tab-width 4)
  (tool-bar-mode -1)
#+end_src

* Fonction diverses pas assez longues pour en dédier un chapitre

J'ai aussi mis mes keybinds car je suis très mauvais pour ranger

#+begin_src elisp
    (defun ouvrir-config-emacs ()
    (interactive)
    (find-file "~/.config/emacs/init.org"))
  (global-set-key (kbd "C-c e") 'ouvrir-config-emacs)

  (defun shuffle-lines (beg end)
  (interactive "r")
  (let ((lines (split-string (buffer-substring beg end) "\n" t)))
    (setq lines (shuffle-vector (vconcat lines)))
    (delete-region beg end)
    (goto-char beg)
    (insert (mapconcat 'identity (append lines nil) "\n"))))

  ;; Je vous PROMETS que c'est utile

  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c C-r") 'recentf-open-files)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-:") 'ibuffer)

  ;; Pas vraiment une fonction, mais ouvre vterm dans un buffer sous le
  ;;  buffer actuel, un peu comme vscode
  (add-to-list 'display-buffer-alist
             '("\\*vterm\\*"
               (display-buffer-reuse-window
                display-buffer-in-direction)
               (direction . bottom)
               (window-height . 0.3)))

#+end_src

* Config org

TOUS mes cours sont pris en notes grâce au org-mode, c'est pourquoi
une partie de ma configuration se focalise sur le org-mode

** Use-packages org

#+begin_src elisp
  (use-package org
    :hook ((org-mode . org-indent-mode)
           (org-mode . visual-line-mode)
           (org-mode . variable-pitch-mode)
           (org-mode . org-modern-mode))
    :config
    (setq org-hide-leading-stars t     
          org-startup-indented t       
          org-ellipsis "…"))           

  (use-package org-modern
    :after org
    :config
    (setq org-modern-star '("◉" "○" "✸" "✿" "◆")
          org-modern-hide-stars t      
          org-modern-table nil         
          org-modern-checkbox '((?X . "☑") (?- . "❍") (?\s . "☐"))))

  (add-hook 'org-mode-hook
          (lambda ()
            (variable-pitch-mode 1)
            (set-face-attribute 'variable-pitch nil :font "Iosevka Fixed" :height 110)))

  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "M-<return>") #'org-meta-return))

#+end_src

** Org capture

#+begin_src elisp
  (setq org-capture-templates
      '(("t" "Tâche" entry (file+headline "~/org/todo.org" "Tâches")
         "* TODO %?\n  %u\n  %a")))
#+end_src
** Fonction EDT

J'importe mon emploi du temps de cours dans mon agenda org grâce à cette
fonction. Évidemment, changez l'URL pour votre URL (à trouver sur hyperplanning) si vous souhaitez
copier mon code. À vrai dire, je sais pas trop si c'est une bonne idée
de mettre l'URL de mon emploi du temps en brut sur un git, mais bon :)

#+begin_src elisp
  (defun imp-edt ()
  (interactive)
  (let* ((url "https://edt-iut.univ-lille.fr/Telechargements/ical/Edt_DELEPINE_GENGEMBRE.ics?version=2018.0.3.6&idICal=F44073DA6A5D3F2604325CF447C258C5&param=643d5b312e2e36325d2666683d3126663d31")
         (local-file "/tmp/edt.ics")
         (org-file (expand-file-name "edt_backup.org" org-directory))
         (converted-file (expand-file-name "edt.org" org-directory)))
    (url-copy-file url local-file t)
    (when (file-exists-p org-file)
      (delete-file org-file))
    (icalendar-import-file local-file org-file)
    (message "Emploi du temps importé dans %s" org-file)

    (with-temp-buffer
      (insert-file-contents org-file)
      (goto-char (point-min))
      (let ((lines '())
            (output ""))
        (while (not (eobp))
          (let ((line (string-trim (thing-at-point 'line t))))
            (unless (string-empty-p line)
              (push line lines)))
          (forward-line 1))
        (setq lines (nreverse lines))
        (while lines
          (let ((line (car lines)))
            (when (string-match "\\([0-9]+\\)/\\([0-9]+\\)/\\([0-9]+\\) \\([0-9:]+\\)-\\([0-9:]+\\) \\(.*\\)" line)
              (let* ((month (match-string 1 line))
                     (day (match-string 2 line))
                     (year (match-string 3 line))
                     (start (match-string 4 line))
                     (end (match-string 5 line))
                     (title (match-string 6 line))
                     (timestamp (format "<%s-%02d-%02d %s-%s>"
                                        year (string-to-number month) (string-to-number day)
                                        start end)))
                (setq output (concat output "* " title "\n  " timestamp "\n\n")))))
          (setq lines (cdr lines)))
        (with-temp-file converted-file
          (insert output))
        (message "Emploi du temps converti : %s" converted-file)))))
 
        (global-set-key (kbd "<f12>") #'imp-edt)
#+end_src

* use-package

#+begin_src elisp
  (use-package vertico
  :init
  (vertico-mode))
#+end_src

* Modeline

J'utilise mood-line, ou en tout cas je teste :)

#+begin_src elisp
  (mood-line-mode 1)

  (display-battery-mode 1)
  (display-time-mode 1)

  (setq display-time-format "%H:%M" 
        display-time-default-load-average nil)

  (setq battery-mode-line-format " [BAT%p%%]")
#+end_src
